# Быстрая сортировка

# Этот алгоритм также относится к алгоритмам «разделяй и властвуй».
# Его используют чаще других алгоритмов, описанных в этой статье.
# При правильной конфигурации он чрезвычайно эффективен и не требует дополнительной памяти,
# в отличие от сортировки слиянием. Массив разделяется на две части по разные стороны от
# опорного элемента. В процессе сортировки элементы меньше опорного помещаются перед ним,
# а равные или большие — позади.

# Время сортировки O(n*log(n)). Обратите внимание,
# что алгоритм быстрой сортировки будет работать медленно,
# если опорный элемент равен наименьшему или наибольшему элементам списка.
# При таких условиях, в отличие от сортировок кучей и слиянием,
# обе из которых имеют в худшем случае время сортировки O(n log n),
# быстрая сортировка в худшем случае будет выполняться O(n²).

# Быстрая сортировка начинается с разбиения списка и выбора одного из элементов в качестве опорного.
# А всё остальное передвигаем так, чтобы этот элемент встал на своё место.
# Все элементы меньше него перемещаются влево, а равные и большие элементы перемещаются вправо.

# Существует много вариаций данного метода. Способ разбиения массива, рассмотренный здесь,
# соответствует схеме Хоара (создателя данного алгоритма).

def partition(nums, low, hight):
    # выбираем средний элемет в качастве опорного
    # Также воможен выбор первого , последнего
    # или произвольного элементов в качестве опорного
    pivot = nums[(low + hight) // 2]
    i = low - 1
    j = hight + 1

    while True:
        i += 1
        while nums[i] < pivot:
            i += 1

        j -= 1
        while nums[j] > pivot:
            j -= 1

        if i >= j:
            return j

        # если элемент с индексом i (слева от опорного) больше, чем
        # элемент с инжксом j (справа от опорного), меняем их местами
        nums[i], nums[j] = nums[j], nums[i]

def quick_sort(nums):
    # создаем вспомогательную функцию, которая вызывается рекурсивно
    def _quick_sort(items, low, hight):
        if low < hight:
            print(nums)
            split_index = partition(items, low, hight)
            _quick_sort(items, low, split_index)
            _quick_sort(items, split_index + 1, hight)

    _quick_sort(nums, 0, len(nums) - 1)

#list_of_nums = [5, 1, 2, 7, 10, 14, -23, 23, 51, 12]
list_of_nums = [5, 1, 2, 7, 10, 6, 14]
quick_sort(list_of_nums)
print(list_of_nums)